.版本 2

.子程序 切换显示装备
.参数 开关, 逻辑型
.局部变量 HOOK, 无望类_HOOK
.局部变量 执行代码, 字节集
.局部变量 编号, 整数型
.局部变量 人物对象, 整数型
.局部变量 ebx, 整数型
.局部变量 物品ID, 整数型
.局部变量 技能ID, 整数型
.局部变量 技能等级, 整数型
.局部变量 i, 整数型
.局部变量 几率, 整数型





.判断开始 (开关 ＝ 真)
    编号 ＝ 内存_申请内存 (进程句柄, 4096)
    内存_写整数型 (进程句柄, 编号, 0)

    人物对象 ＝ 内存_申请内存 (进程句柄, 4096)
    ebx ＝ 内存_申请内存 (进程句柄, 4096)
    物品ID ＝ 内存_申请内存 (进程句柄, 4096)
    技能等级 ＝ 内存_申请内存 (进程句柄, 4096)
    技能ID ＝ 内存_申请内存 (进程句柄, 4096)
    几率 ＝ 内存_申请内存 (进程句柄, 4096)


    .计次循环首 (取数组成员数 (全局_切换装备buff), i)
        .如果真 (全局_切换装备buff [i].技能类型 ＝ 2)
            内存_写整数型 (进程句柄, 物品ID ＋ (i － 1) × 4, 全局_切换装备buff [i].战功)
            内存_写整数型 (进程句柄, 技能ID ＋ (i － 1) × 4, 全局_切换装备buff [i].技能ID)
            内存_写整数型 (进程句柄, 技能等级 ＋ (i － 1) × 4, 全局_切换装备buff [i].技能等级)
            内存_写整数型 (进程句柄, 几率 ＋ (i － 1) × 4, 全局_切换装备buff [i].几率)

        .如果真结束

    .计次循环尾 ()


    执行代码 ＝ {  }
    执行代码 ＝ 执行代码 ＋ { 96 }
    执行代码 ＝ 执行代码 ＋ { 199, 5 } ＋ 到字节集 (编号) ＋ { 0, 0, 0, 0 }  ' mov dword ptr ds:[0x22222222],0x0
    执行代码 ＝ 执行代码 ＋ { 137, 61 } ＋ 到字节集 (人物对象)  ' mov dword ptr ds:[0xEAF0000],EDI
    执行代码 ＝ 执行代码 ＋ { 137, 29 } ＋ 到字节集 (ebx)  ' mov dword ptr ds:[0xEAF0000],ebx
    执行代码 ＝ 执行代码 ＋ { 139, 13 } ＋ 到字节集 (编号)  ' mov ecx,dword ptr ds:[0x2222222]
    执行代码 ＝ 执行代码 ＋ { 139, 53 } ＋ 到字节集 (人物对象)  ' mov esi,dword ptr ds:[人物对象]
    执行代码 ＝ 执行代码 ＋ { 139, 29 } ＋ 到字节集 (ebx)
    执行代码 ＝ 执行代码 ＋ { 144, 144, 144, 144, 144, 144 }
    执行代码 ＝ 执行代码 ＋ { 131, 60, 141 } ＋ 到字节集 (物品ID) ＋ { 0 }  ' 判断物品ID是不是等于0

    执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“74 5C”)  ' je
    ' 执行代码 ＝ 执行代码 ＋ { 139, 132, 158, 192, 1, 0, 0, 139, 64, 48, 139, 0 }  ' 读装备对象
    执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“8B 84 9E CC 01 00 00 8B 40 30 8B 00”)

    执行代码 ＝ 执行代码 ＋ { 62, 57, 4, 141 } ＋ 到字节集 (物品ID)  ' 判断物品ID是不是等于0  cmp dword ptr ds:[ecx*4+0x11111111],eax


    执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“75 3D”)  ' JNZ
    执行代码 ＝ 执行代码 ＋ { 62, 139, 20, 141 } ＋ 到字节集 (技能等级)  ' mov edx,dword ptr ds:[ecx*4+0xEB40000]
    执行代码 ＝ 执行代码 ＋ { 62, 139, 4, 141 } ＋ 到字节集 (技能ID)  ' mov eax,dword ptr ds:[ecx*4+0xEB40000]

    执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“BD C0 01 42 00”)  ' mov ebp,0x41BB30
    执行代码 ＝ 执行代码 ＋ { 255, 213 }  ' call ebp '遍历技能列表
    执行代码 ＝ 执行代码 ＋ { 131, 248, 0 }  ' cmp eax,0x0

    执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“74 21”)  ' je
    执行代码 ＝ 执行代码 ＋ { 139, 13 } ＋ 到字节集 (编号)  ' mov ecx,dword ptr ds:[0x2222222]
    执行代码 ＝ 执行代码 ＋ { 62, 131, 60, 141 } ＋ 到字节集 (几率) ＋ { 100 }  ' cmp dword ptr ds:[ecx*4+0x10000000],0x64

    执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“75 10”)  ' jnz
    ' 执行代码 ＝ 执行代码 ＋ { 106, 1, 86, 139, 206, 139, 240, 184, 176, 203, 69, 0, 255, 208 }  ' 添加buffcall
    执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“6A 01 56 8B CE 8B F8 B8 20 92 46 00 FF D0”)
    执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“EB 09”)  ' jmp
    执行代码 ＝ 执行代码 ＋ { 131, 5 } ＋ 到字节集 (编号) ＋ { 1 }  ' add dword ptr ds:[0x22222222],0x1
    执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“EB 82”)

    执行代码 ＝ 执行代码 ＋ { 97 }




    HOOK.开始HOOK2 (进程句柄, 转换_十六到十 (“00477146”), 转换_十六进制到字节集 (“A9424 90000000”), , 执行代码)  ' '切换装备上去会断

    ' 00477146   .  8A9424 90000000           MOV DL,BYTE PTR SS:[ESP+90]




    ' call 00469220 增加buff
    ' CALL 004201C0 遍历技能

    HOOK.开始HOOK2 (进程句柄, 转换_十六到十 (“00477035”), 转换_十六进制到字节集 (“C7 06 00 00 00 00”), , 执行代码)  ' '//穿装备会断 脱装备不会
    ' 00477035   .  C706 00000000     MOV DWORD PTR DS:[ESI],0

    HOOK.开始HOOK2 (进程句柄, 转换_十六到十 (“00476E69”), 转换_十六进制到字节集 (“8B8F 14590000”), , 执行代码)  ' 脱 有装备的位置 增加buff
    ' 00476E69   .  8B8F 14590000     MOV ECX,DWORD PTR DS:[EDI+5914]


    ' 0

    切换显示装备_技能打怪 (开关)
    切换显示装备_删除状态 (开关)
    切换显示装备_被怪打_被人打 (开关)
    切换显示装备_物理打怪 (开关)


.默认


    内存_写字节集型 (进程句柄, 转换_十六到十 (“00477146”), 转换_十六进制到字节集 (“A9424 90000000”), )
    内存_写字节集型 (进程句柄, 转换_十六到十 (“00477035”), 转换_十六进制到字节集 (“C7 06 00 00 00 00”), )
    内存_写字节集型 (进程句柄, 转换_十六到十 (“00476E69”), 转换_十六进制到字节集 (“8B8F 14590000”), )



    切换显示装备_删除状态 (开关)
    切换显示装备_技能打怪 (开关)  ' ’0
    切换显示装备_被怪打_被人打 (开关)  ' '1
    切换显示装备_物理打怪 (开关)  ' '0



.版本 2
.支持库 eGrid



.子程序 切换显示装备_技能打怪
.参数 开关, 逻辑型
.局部变量 HOOK, 无望类_HOOK
.局部变量 执行代码, 字节集
.局部变量 编号, 整数型
.局部变量 人物对象, 整数型
.局部变量 ebx, 整数型
.局部变量 物品ID, 整数型
.局部变量 技能ID, 整数型
.局部变量 技能等级, 整数型
.局部变量 i, 整数型
.局部变量 几率, 整数型
.局部变量 随机数eax, 整数型
.局部变量 随机数内存, 整数型
.局部变量 执行代码2, 字节集
.局部变量 eax, 整数型
.局部变量 当前技能对象, 整数型
.局部变量 技能类型, 整数型
.局部变量 开始用技能, 整数型
.局部变量 执行代码3, 字节集
.局部变量 执行代码4, 字节集
.局部变量 怪物对象, 整数型
.局部变量 eax2, 整数型
.局部变量 开始用技能eax, 整数型
.局部变量 i2, 整数型



随机数eax ＝ 内存_申请内存 (进程句柄, 4096)
内存_写字节集型 (进程句柄, 随机数eax, { 85, 139, 236 } ＋ { 81, 82, 15, 49, 185, 23, 0, 0, 0, 247, 225, 131, 192, 7, 139, 77, 12, 43, 77, 8, 65, 51, 210, 247, 241, 3, 85, 8, 139, 194, 90, 89, 201, 194, 8, 0 }, )
随机数内存 ＝ 内存_申请内存 (进程句柄, 4096)
内存_写整数型 (进程句柄, 随机数内存, 随机数eax)
.判断开始 (全局_ps_game版本 ＝ 5)

.判断 (全局_ps_game版本 ＝ 9)

.判断 (全局_ps_game版本 ＝ 12)

    .判断开始 (开关 ＝ 真)
        编号 ＝ 内存_申请内存 (进程句柄, 4096)
        内存_写整数型 (进程句柄, 编号, 0)
        开始用技能 ＝ 内存_申请内存 (进程句柄, 4096)
        怪物对象 ＝ 内存_申请内存 (进程句柄, 4096)
        开始用技能eax ＝ 内存_申请内存 (进程句柄, 4096)


        人物对象 ＝ 内存_申请内存 (进程句柄, 4096)
        ebx ＝ 内存_申请内存 (进程句柄, 4096)
        物品ID ＝ 内存_申请内存 (进程句柄, 4096)
        技能等级 ＝ 内存_申请内存 (进程句柄, 4096)
        技能ID ＝ 内存_申请内存 (进程句柄, 4096)
        几率 ＝ 内存_申请内存 (进程句柄, 4096)
        当前技能对象 ＝ 内存_申请内存 (进程句柄, 4096)
        技能类型 ＝ 内存_申请内存 (进程句柄, 4096)
        i2 ＝ 0

        .计次循环首 (取数组成员数 (全局_切换装备buff), i)
            .如果真 (全局_切换装备buff [i].技能类型 ＝ 0 且 全局_切换装备buff [i].几率 ≠ 100)
                内存_写整数型 (进程句柄, 物品ID ＋ i2 × 4, 全局_切换装备buff [i].战功)
                内存_写整数型 (进程句柄, 技能ID ＋ i2 × 4, 全局_切换装备buff [i].技能ID)
                内存_写整数型 (进程句柄, 技能等级 ＋ i2 × 4, 全局_切换装备buff [i].技能等级)

                内存_写整数型 (进程句柄, 几率 ＋ i2 × 4, 全局_切换装备buff [i].几率)

                内存_写整数型 (进程句柄, 技能类型 ＋ i2 × 4, 全局_切换装备buff [i].技能类型)

                i2 ＝ i2 ＋ 1

            .如果真结束

        .计次循环尾 ()


        执行代码 ＝ {  }
        执行代码 ＝ 执行代码 ＋ { 96 }
        执行代码 ＝ 执行代码 ＋ { 139, 247 }  ' mov esi,edi
        执行代码 ＝ 执行代码 ＋ { 187, 0, 0, 0, 0 }  ' mov ebx,0x0

        ' 执行代码 ＝ 执行代码 ＋ { 163 } ＋ 到字节集 (怪物对象)  ' mov [怪物对象],eax
        执行代码 ＝ 执行代码 ＋ { 199, 5 } ＋ 到字节集 (编号) ＋ { 0, 0, 0, 0 }  ' mov dword ptr ds:[0x22222222],0x0
        执行代码 ＝ 执行代码 ＋ { 137, 53 } ＋ 到字节集 (人物对象)  ' mov dword ptr ds:[0xEAF0000],esi
        执行代码 ＝ 执行代码 ＋ { 137, 29 } ＋ 到字节集 (ebx)  ' mov dword ptr ds:[0xEAF0000],ebx
        执行代码 ＝ 执行代码 ＋ { 139, 13 } ＋ 到字节集 (编号)  ' mov ecx,dword ptr ds:[编号]
        执行代码 ＝ 执行代码 ＋ { 139, 53 } ＋ 到字节集 (人物对象)  ' mov esi,dword ptr ds:[人物对象]
        执行代码 ＝ 执行代码 ＋ { 139, 29 } ＋ 到字节集 (ebx)
        执行代码 ＝ 执行代码 ＋ { 144, 144, 144, 144, 144, 144 }
        执行代码 ＝ 执行代码 ＋ { 131, 60, 141 } ＋ 到字节集 (物品ID) ＋ { 0 }  ' 判断物品ID是不是等于0

        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“0F 84 B3 00 00 00”)  ' je
        ' 执行代码 ＝ 执行代码 ＋ { 139, 132, 158, 192, 1, 0, 0 }  ' 读装备对象 mov eax,dword ptr ds:[esi+ebx*4+0x1C0]
        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“8B 84 9E CC 01 00 00”)  ' mov eax,dword ptr ds:[esi+ebx*4+0x1CC]

        执行代码 ＝ 执行代码 ＋ { 131, 248, 0 }  ' cmp eax,0x0

        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“74 7F”)  ' je
        执行代码 ＝ 执行代码 ＋ { 144, 144, 144, 144 }
        执行代码 ＝ 执行代码 ＋ { 139, 64, 48 }  ' mov eax,dword ptr ds:[eax+0x30]
        执行代码 ＝ 执行代码 ＋ { 139, 0 }  ' mov eax,dword ptr ds:[eax]

        执行代码 ＝ 执行代码 ＋ { 62, 57, 4, 141 } ＋ 到字节集 (物品ID)  ' 判断物品ID是不是等于0  cmp dword ptr ds:[ecx*4+0x11111111],eax

        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“75 6C”)  ' JNZ
        执行代码 ＝ 执行代码 ＋ { 62, 139, 20, 141 } ＋ 到字节集 (技能等级)  ' mov edx,dword ptr ds:[ecx*4+0xEB40000]
        执行代码 ＝ 执行代码 ＋ { 62, 139, 4, 141 } ＋ 到字节集 (技能ID)  ' mov eax,dword ptr ds:[ecx*4+0xEB40000]

        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“BD C0 01 42 00”)  ' MOV EBP,4201C0
        执行代码 ＝ 执行代码 ＋ { 255, 213 }  ' call ebp '遍历所有技能
        执行代码 ＝ 执行代码 ＋ { 163 } ＋ 到字节集 (当前技能对象)  ' mov [当前技能对象],eax

        执行代码 ＝ 执行代码 ＋ { 131, 248, 0 }  ' cmp eax,0x0

        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“74 4b”)  ' je
        执行代码 ＝ 执行代码 ＋ { 139, 13 } ＋ 到字节集 (编号)  ' mov ecx,dword ptr ds:[0x2222222]
        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“90 90”)

        执行代码 ＝ 执行代码 ＋ { 106, 100 }  ' PUSH 64
        执行代码 ＝ 执行代码 ＋ { 106, 1 }  ' PUSH 1
        执行代码 ＝ 执行代码 ＋ { 255, 21 } ＋ 到字节集 (随机数内存)  ' CALL [111111]
        执行代码 ＝ 执行代码 ＋ { 139, 208 }  ' mov edx,eax
        执行代码 ＝ 执行代码 ＋ { 139, 13 } ＋ 到字节集 (编号)  ' mov ecx,dword ptr ds:[0x2222222]
        执行代码 ＝ 执行代码 ＋ { 62, 57, 20, 141 } ＋ 到字节集 (几率)  ' cmp dword ptr ds:[ecx*4+0x44680000],edx
        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“7C 27”)  ' jL  大于

        执行代码 ＝ 执行代码 ＋ { 139, 13 } ＋ 到字节集 (编号)  ' mov ecx,dword ptr ds:[编号]
        执行代码 ＝ 执行代码 ＋ { 255, 53 } ＋ 到字节集 (当前技能对象)  ' push  [当前技能对象]                  +0x14
        执行代码 ＝ 执行代码 ＋ { 255, 53 } ＋ 到字节集 (人物对象)  ' push  [人物对象]                          +0x10
        执行代码 ＝ 执行代码 ＋ { 255, 53 } ＋ 到字节集 (怪物对象)  ' push dword ptr ds:[怪物对象]                      +0c
        执行代码 ＝ 执行代码 ＋ { 255, 52, 141 } ＋ 到字节集 (技能类型)  ' push dword ptr ds:[ecx*4+技能类型]   +08
        执行代码 ＝ 执行代码 ＋ { 255, 21 } ＋ 到字节集 (开始用技能eax)  ' CALL [开始用技能]



        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“EB 00”)  ' jmp

        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“83 05”) ＋ 到字节集 (ebx) ＋ { 1 }  ' add dword ptr ds:[0xEBD0000],0x1
        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“83 3d”) ＋ 到字节集 (ebx) ＋ { 24 }  ' add dword ptr ds:[0xEBD0000],0x18
        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“7c 13”)  ' jl
        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“c7 05”) ＋ 到字节集 (ebx) ＋ { 0, 0, 0, 0 }
        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“EB 00”)


        执行代码 ＝ 执行代码 ＋ { 131, 5 } ＋ 到字节集 (编号) ＋ { 1 }  ' add dword ptr ds:[0x22222222],0x1
        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“E9 27 FF FF FF”)  ' jmp
        执行代码 ＝ 执行代码 ＋ { 97 }
        执行代码 ＝ 执行代码 ＋ { 195 }  ' retn

        eax ＝ 内存_申请内存 (进程句柄, 4096)
        内存_写字节集型 (进程句柄, eax, 执行代码, )



        内存_写整数型 (进程句柄, 开始用技能eax, 开始用技能)


        执行代码 ＝ 执行代码 ＋ { 139, 13 } ＋ 到字节集 (编号)  ' mov ecx,dword ptr ds:[编号]
        执行代码 ＝ 执行代码 ＋ { 255, 53 } ＋ 到字节集 (当前技能对象)  ' push  [当前技能对象]                  +0x14
        执行代码 ＝ 执行代码 ＋ { 255, 53 } ＋ 到字节集 (人物对象)  ' push  [人物对象]                          +0x10
        执行代码 ＝ 执行代码 ＋ { 255, 53 } ＋ 到字节集 (怪物对象)  ' push dword ptr ds:[怪物对象]                      +0c


        执行代码3 ＝ { 85, 139, 236 }  ' push ebp mov ebp,esp
        执行代码3 ＝ 执行代码3 ＋ { 106, 1 }  ' push 0x1
        执行代码3 ＝ 执行代码3 ＋ { 86 }  ' push esi  人物对象
        执行代码3 ＝ 执行代码3 ＋ { 139, 206 }  ' mov ecx,esi

        执行代码3 ＝ 执行代码3 ＋ 转换_十六进制到字节集 (“8B 7D 14”)  ' mov edi,dword ptr ss:[ebp+0x14]
        执行代码3 ＝ 执行代码3 ＋ 转换_十六进制到字节集 (“B8 20 92 46 00”)  ' MOV EAX,469220
        执行代码3 ＝ 执行代码3 ＋ { 255, 208 }  ' CALL EAX 添加buff call




        执行代码3 ＝ 执行代码3 ＋ { 201, 194, 16, 0 }  ' retn 0x10
        内存_写字节集型 (进程句柄, 开始用技能, 执行代码3, )

        ' 0045CE02  |> \57            push edi                                            ;  技能对象
        ' 0045CE03  |.  56            push esi                                            ;  怪物对象
        ' 0045CE04  |.  8BCB          mov ecx,ebx                                         ;  人物对象
        ' 0045CE06  |.  E8 75000000   call <ps_game.指定单体攻击>                               ;  指定单体攻击  call 0045CE80



        ' 00474D87  |> \57            push edi                                 ;  案例 500 --> 分支 00474BB9
        ' 00474D88  |.  8BCB          mov ecx,ebx
        ' 00474D8A  |.  E8 01370000   call ps_game.00478490                    ;  517


        eax2 ＝ 内存_申请内存 (进程句柄, 4096)
        内存_写整数型 (进程句柄, eax2, eax)

        执行代码4 ＝ 执行代码4 ＋ { 96 }

        执行代码4 ＝ 执行代码4 ＋ { 163 } ＋ 到字节集 (怪物对象)  ' mov dword ptr ds:[0xEAF0000],eax

        执行代码4 ＝ 执行代码4 ＋ { 255, 21 } ＋ 到字节集 (eax2)


        执行代码4 ＝ 执行代码4 ＋ { 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144 }
        执行代码4 ＝ 执行代码4 ＋ { 97 }

        HOOK.开始HOOK2 (进程句柄, 转换_十六到十 (“004655B8”), 转换_十六进制到字节集 (“C7 87 7C 15 00 00 02 00 00 00”), , 执行代码4)  ' 技能打怪 ''选中怪物
        ' 004655B8   .  C787 7C150000 02000000    MOV DWORD PTR DS:[EDI+157C],2



    .默认

        内存_写字节集型 (进程句柄, 转换_十六到十 (“004655B8”), 转换_十六进制到字节集 (“C7 87 7C 15 00 00 02 00 00 00”), )
    .判断结束

.默认

.判断结束


.子程序 切换显示装备_物理打怪
.参数 开关, 逻辑型
.局部变量 HOOK, 无望类_HOOK
.局部变量 执行代码, 字节集
.局部变量 编号, 整数型
.局部变量 人物对象, 整数型
.局部变量 ebx, 整数型
.局部变量 物品ID, 整数型
.局部变量 技能ID, 整数型
.局部变量 技能等级, 整数型
.局部变量 i, 整数型
.局部变量 几率, 整数型
.局部变量 随机数eax, 整数型
.局部变量 随机数内存, 整数型
.局部变量 执行代码2, 字节集
.局部变量 eax, 整数型
.局部变量 当前技能对象, 整数型
.局部变量 技能类型, 整数型
.局部变量 开始用技能, 整数型
.局部变量 执行代码3, 字节集
.局部变量 执行代码4, 字节集
.局部变量 怪物对象, 整数型
.局部变量 eax2, 整数型
.局部变量 开始用技能eax, 整数型
.局部变量 i2, 整数型



随机数eax ＝ 内存_申请内存 (进程句柄, 4096)
内存_写字节集型 (进程句柄, 随机数eax, { 85, 139, 236 } ＋ { 81, 82, 15, 49, 185, 23, 0, 0, 0, 247, 225, 131, 192, 7, 139, 77, 12, 43, 77, 8, 65, 51, 210, 247, 241, 3, 85, 8, 139, 194, 90, 89, 201, 194, 8, 0 }, )
随机数内存 ＝ 内存_申请内存 (进程句柄, 4096)
内存_写整数型 (进程句柄, 随机数内存, 随机数eax)
.判断开始 (全局_ps_game版本 ＝ 5)

.判断 (全局_ps_game版本 ＝ 9)

.判断 (全局_ps_game版本 ＝ 12)

    .判断开始 (开关 ＝ 真)
        编号 ＝ 内存_申请内存 (进程句柄, 4096)
        内存_写整数型 (进程句柄, 编号, 0)
        开始用技能 ＝ 内存_申请内存 (进程句柄, 4096)
        怪物对象 ＝ 内存_申请内存 (进程句柄, 4096)
        开始用技能eax ＝ 内存_申请内存 (进程句柄, 4096)


        人物对象 ＝ 内存_申请内存 (进程句柄, 4096)
        ebx ＝ 内存_申请内存 (进程句柄, 4096)
        物品ID ＝ 内存_申请内存 (进程句柄, 4096)
        技能等级 ＝ 内存_申请内存 (进程句柄, 4096)
        技能ID ＝ 内存_申请内存 (进程句柄, 4096)
        几率 ＝ 内存_申请内存 (进程句柄, 4096)
        当前技能对象 ＝ 内存_申请内存 (进程句柄, 4096)
        技能类型 ＝ 内存_申请内存 (进程句柄, 4096)
        i2 ＝ 0

        .计次循环首 (取数组成员数 (全局_切换装备buff), i)
            .如果真 (全局_切换装备buff [i].技能类型 ＝ 0 且 全局_切换装备buff [i].几率 ≠ 100)
                内存_写整数型 (进程句柄, 物品ID ＋ i2 × 4, 全局_切换装备buff [i].战功)
                内存_写整数型 (进程句柄, 技能ID ＋ i2 × 4, 全局_切换装备buff [i].技能ID)
                内存_写整数型 (进程句柄, 技能等级 ＋ i2 × 4, 全局_切换装备buff [i].技能等级)

                内存_写整数型 (进程句柄, 几率 ＋ i2 × 4, 全局_切换装备buff [i].几率)

                内存_写整数型 (进程句柄, 技能类型 ＋ i2 × 4, 全局_切换装备buff [i].技能类型)

                i2 ＝ i2 ＋ 1

            .如果真结束

        .计次循环尾 ()


        执行代码 ＝ {  }
        执行代码 ＝ 执行代码 ＋ { 96 }
        执行代码 ＝ 执行代码 ＋ { 139, 247 }  ' mov esi,edi
        执行代码 ＝ 执行代码 ＋ { 187, 0, 0, 0, 0 }  ' mov ebx,0x0

        ' 执行代码 ＝ 执行代码 ＋ { 163 } ＋ 到字节集 (怪物对象)  ' mov [怪物对象],eax
        执行代码 ＝ 执行代码 ＋ { 199, 5 } ＋ 到字节集 (编号) ＋ { 0, 0, 0, 0 }  ' mov dword ptr ds:[0x22222222],0x0
        执行代码 ＝ 执行代码 ＋ { 137, 53 } ＋ 到字节集 (人物对象)  ' mov dword ptr ds:[0xEAF0000],esi
        执行代码 ＝ 执行代码 ＋ { 137, 29 } ＋ 到字节集 (ebx)  ' mov dword ptr ds:[0xEAF0000],ebx
        执行代码 ＝ 执行代码 ＋ { 139, 13 } ＋ 到字节集 (编号)  ' mov ecx,dword ptr ds:[编号]
        执行代码 ＝ 执行代码 ＋ { 139, 53 } ＋ 到字节集 (人物对象)  ' mov esi,dword ptr ds:[人物对象]
        执行代码 ＝ 执行代码 ＋ { 139, 29 } ＋ 到字节集 (ebx)
        执行代码 ＝ 执行代码 ＋ { 144, 144, 144, 144, 144, 144 }
        执行代码 ＝ 执行代码 ＋ { 131, 60, 141 } ＋ 到字节集 (物品ID) ＋ { 0 }  ' 判断物品ID是不是等于0

        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“0F 84 B3 00 00 00”)  ' je
        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“8B 84 9E CC 01 00 00”)  ' mov eax,dword ptr ds:[esi+ebx*4+0x1CC]
        执行代码 ＝ 执行代码 ＋ { 131, 248, 0 }  ' cmp eax,0x0

        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“74 7F”)  ' je
        执行代码 ＝ 执行代码 ＋ { 144, 144, 144, 144 }
        执行代码 ＝ 执行代码 ＋ { 139, 64, 48 }  ' mov eax,dword ptr ds:[eax+0x30]
        执行代码 ＝ 执行代码 ＋ { 139, 0 }  ' mov eax,dword ptr ds:[eax]

        执行代码 ＝ 执行代码 ＋ { 62, 57, 4, 141 } ＋ 到字节集 (物品ID)  ' 判断物品ID是不是等于0  cmp dword ptr ds:[ecx*4+0x11111111],eax

        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“75 6C”)  ' JNZ
        执行代码 ＝ 执行代码 ＋ { 62, 139, 20, 141 } ＋ 到字节集 (技能等级)  ' mov edx,dword ptr ds:[ecx*4+0xEB40000]
        执行代码 ＝ 执行代码 ＋ { 62, 139, 4, 141 } ＋ 到字节集 (技能ID)  ' mov eax,dword ptr ds:[ecx*4+0xEB40000]
        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“BD C0 01 42 00”)  ' MOV EBP,4201C0
        执行代码 ＝ 执行代码 ＋ { 255, 213 }  ' call ebp '遍历所有技能
        执行代码 ＝ 执行代码 ＋ { 163 } ＋ 到字节集 (当前技能对象)  ' mov [当前技能对象],eax

        执行代码 ＝ 执行代码 ＋ { 131, 248, 0 }  ' cmp eax,0x0

        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“74 4b”)  ' je
        执行代码 ＝ 执行代码 ＋ { 139, 13 } ＋ 到字节集 (编号)  ' mov ecx,dword ptr ds:[0x2222222]
        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“90 90”)

        执行代码 ＝ 执行代码 ＋ { 106, 100 }  ' PUSH 64
        执行代码 ＝ 执行代码 ＋ { 106, 1 }  ' PUSH 1
        执行代码 ＝ 执行代码 ＋ { 255, 21 } ＋ 到字节集 (随机数内存)  ' CALL [111111]
        执行代码 ＝ 执行代码 ＋ { 139, 208 }  ' mov edx,eax
        执行代码 ＝ 执行代码 ＋ { 139, 13 } ＋ 到字节集 (编号)  ' mov ecx,dword ptr ds:[0x2222222]
        执行代码 ＝ 执行代码 ＋ { 62, 57, 20, 141 } ＋ 到字节集 (几率)  ' cmp dword ptr ds:[ecx*4+0x44680000],edx
        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“7C 27”)  ' jL  大于

        执行代码 ＝ 执行代码 ＋ { 139, 13 } ＋ 到字节集 (编号)  ' mov ecx,dword ptr ds:[编号]
        执行代码 ＝ 执行代码 ＋ { 255, 53 } ＋ 到字节集 (当前技能对象)  ' push  [当前技能对象]                  +0x14
        执行代码 ＝ 执行代码 ＋ { 255, 53 } ＋ 到字节集 (人物对象)  ' push  [人物对象]                          +0x10
        执行代码 ＝ 执行代码 ＋ { 255, 53 } ＋ 到字节集 (怪物对象)  ' push dword ptr ds:[怪物对象]                      +0c
        执行代码 ＝ 执行代码 ＋ { 255, 52, 141 } ＋ 到字节集 (技能类型)  ' push dword ptr ds:[ecx*4+技能类型]   +08
        执行代码 ＝ 执行代码 ＋ { 255, 21 } ＋ 到字节集 (开始用技能eax)  ' CALL [开始用技能]



        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“EB 00”)  ' jmp

        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“83 05”) ＋ 到字节集 (ebx) ＋ { 1 }  ' add dword ptr ds:[0xEBD0000],0x1
        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“83 3d”) ＋ 到字节集 (ebx) ＋ { 24 }  ' add dword ptr ds:[0xEBD0000],0x18
        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“7c 13”)  ' jl
        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“c7 05”) ＋ 到字节集 (ebx) ＋ { 0, 0, 0, 0 }
        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“EB 00”)


        执行代码 ＝ 执行代码 ＋ { 131, 5 } ＋ 到字节集 (编号) ＋ { 1 }  ' add dword ptr ds:[0x22222222],0x1
        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“E9 27 FF FF FF”)  ' jmp
        执行代码 ＝ 执行代码 ＋ { 97 }
        执行代码 ＝ 执行代码 ＋ { 195 }  ' retn

        eax ＝ 内存_申请内存 (进程句柄, 4096)
        内存_写字节集型 (进程句柄, eax, 执行代码, )



        内存_写整数型 (进程句柄, 开始用技能eax, 开始用技能)


        执行代码 ＝ 执行代码 ＋ { 139, 13 } ＋ 到字节集 (编号)  ' mov ecx,dword ptr ds:[编号]
        执行代码 ＝ 执行代码 ＋ { 255, 53 } ＋ 到字节集 (当前技能对象)  ' push  [当前技能对象]                  +0x14
        执行代码 ＝ 执行代码 ＋ { 255, 53 } ＋ 到字节集 (人物对象)  ' push  [人物对象]                          +0x10
        执行代码 ＝ 执行代码 ＋ { 255, 53 } ＋ 到字节集 (怪物对象)  ' push dword ptr ds:[怪物对象]                      +0c


        执行代码3 ＝ { 85, 139, 236 }  ' push ebp mov ebp,esp
        ' 执行代码3 ＝ 执行代码3 ＋ { 131, 125, 8, 0 }  ' cmp dword ptr ss:[ebp+0x8],0x0
        ' 执行代码3 ＝ 执行代码3 ＋ 转换_十六进制到字节集 (“75 0F”)  ' jnz
        执行代码3 ＝ 执行代码3 ＋ { 106, 1 }  ' push 0x1
        执行代码3 ＝ 执行代码3 ＋ { 86 }  ' push esi  人物对象
        执行代码3 ＝ 执行代码3 ＋ { 139, 206 }  ' mov ecx,esi

        执行代码3 ＝ 执行代码3 ＋ 转换_十六进制到字节集 (“8B 7D 14”)  ' mov edi,dword ptr ss:[ebp+0x14]
        执行代码3 ＝ 执行代码3 ＋ 转换_十六进制到字节集 (“B8 20 92 46 00”)  ' MOV EAX,469220
        执行代码3 ＝ 执行代码3 ＋ { 255, 208 }  ' CALL EAX 添加buffcall


        执行代码3 ＝ 执行代码3 ＋ { 201, 194, 16, 0 }  ' retn 0x10
        内存_写字节集型 (进程句柄, 开始用技能, 执行代码3, )



        eax2 ＝ 内存_申请内存 (进程句柄, 4096)
        内存_写整数型 (进程句柄, eax2, eax)

        执行代码4 ＝ { 96 }


        执行代码4 ＝ 执行代码4 ＋ 转换_十六进制到字节集 (“B8 40 38 46 00”)  ' MOV EAX,463840
        执行代码4 ＝ 执行代码4 ＋ 转换_十六进制到字节集 (“FF D0”)  ' call eax
        执行代码4 ＝ 执行代码4 ＋ { 163 } ＋ 到字节集 (怪物对象)  ' mov dword ptr ds:[0xEAF0000],eax

        执行代码4 ＝ 执行代码4 ＋ { 255, 21 } ＋ 到字节集 (eax2)


        执行代码4 ＝ 执行代码4 ＋ { 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144 }
        执行代码4 ＝ 执行代码4 ＋ { 97 }
        HOOK.开始HOOK2 (进程句柄, 转换_十六到十 (“0048DA7F”), 转换_十六进制到字节集 (“89 8F 80 15 00 00”), , 执行代码4)  ' 物理打怪
        ' 0048DA7F   .  898F 80150000             MOV DWORD PTR DS:[EDI+1580],ECX




    .默认

        内存_写字节集型 (进程句柄, 转换_十六到十 (“0048DA7F”), 转换_十六进制到字节集 (“89 8F 80 15 00 00”), )
    .判断结束

.默认

.判断结束


.子程序 切换显示装备_被怪打_被人打
.参数 开关, 逻辑型
.局部变量 HOOK, 无望类_HOOK
.局部变量 执行代码, 字节集
.局部变量 编号, 整数型
.局部变量 人物对象, 整数型
.局部变量 ebx, 整数型
.局部变量 物品ID, 整数型
.局部变量 技能ID, 整数型
.局部变量 技能等级, 整数型
.局部变量 i, 整数型
.局部变量 几率, 整数型
.局部变量 随机数eax, 整数型
.局部变量 随机数内存, 整数型
.局部变量 执行代码2, 字节集
.局部变量 eax, 整数型
.局部变量 当前技能对象, 整数型
.局部变量 技能类型, 整数型
.局部变量 开始用技能, 整数型
.局部变量 执行代码3, 字节集
.局部变量 执行代码4, 字节集
.局部变量 怪物对象, 整数型
.局部变量 eax2, 整数型
.局部变量 开始用技能eax, 整数型
.局部变量 i2, 整数型



随机数eax ＝ 内存_申请内存 (进程句柄, 4096)
内存_写字节集型 (进程句柄, 随机数eax, { 85, 139, 236 } ＋ { 81, 82, 15, 49, 185, 23, 0, 0, 0, 247, 225, 131, 192, 7, 139, 77, 12, 43, 77, 8, 65, 51, 210, 247, 241, 3, 85, 8, 139, 194, 90, 89, 201, 194, 8, 0 }, )
随机数内存 ＝ 内存_申请内存 (进程句柄, 4096)
内存_写整数型 (进程句柄, 随机数内存, 随机数eax)
.判断开始 (全局_ps_game版本 ＝ 5)

.判断 (全局_ps_game版本 ＝ 9)

.判断 (全局_ps_game版本 ＝ 12)

    .判断开始 (开关 ＝ 真)
        编号 ＝ 内存_申请内存 (进程句柄, 4096)
        内存_写整数型 (进程句柄, 编号, 0)
        开始用技能 ＝ 内存_申请内存 (进程句柄, 4096)
        怪物对象 ＝ 内存_申请内存 (进程句柄, 4096)
        开始用技能eax ＝ 内存_申请内存 (进程句柄, 4096)


        人物对象 ＝ 内存_申请内存 (进程句柄, 4096)
        ebx ＝ 内存_申请内存 (进程句柄, 4096)
        物品ID ＝ 内存_申请内存 (进程句柄, 4096)
        技能等级 ＝ 内存_申请内存 (进程句柄, 4096)
        技能ID ＝ 内存_申请内存 (进程句柄, 4096)
        几率 ＝ 内存_申请内存 (进程句柄, 4096)
        当前技能对象 ＝ 内存_申请内存 (进程句柄, 4096)
        技能类型 ＝ 内存_申请内存 (进程句柄, 4096)
        i2 ＝ 0

        .计次循环首 (取数组成员数 (全局_切换装备buff), i)
            .如果真 (全局_切换装备buff [i].技能类型 ＝ 1 且 全局_切换装备buff [i].几率 ≠ 100)
                内存_写整数型 (进程句柄, 物品ID ＋ i2 × 4, 全局_切换装备buff [i].战功)
                内存_写整数型 (进程句柄, 技能ID ＋ i2 × 4, 全局_切换装备buff [i].技能ID)
                内存_写整数型 (进程句柄, 技能等级 ＋ i2 × 4, 全局_切换装备buff [i].技能等级)

                内存_写整数型 (进程句柄, 几率 ＋ i2 × 4, 全局_切换装备buff [i].几率)

                内存_写整数型 (进程句柄, 技能类型 ＋ i2 × 4, 全局_切换装备buff [i].技能类型)

                i2 ＝ i2 ＋ 1
            .如果真结束

        .计次循环尾 ()


        执行代码 ＝ {  }
        执行代码 ＝ 执行代码 ＋ { 96 }


        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“8B F5”)
        执行代码 ＝ 执行代码 ＋ { 187, 0, 0, 0, 0 }  ' mov ebx,0x0

        ' 执行代码 ＝ 执行代码 ＋ { 163 } ＋ 到字节集 (怪物对象)  ' mov [怪物对象],eax
        执行代码 ＝ 执行代码 ＋ { 199, 5 } ＋ 到字节集 (编号) ＋ { 0, 0, 0, 0 }  ' mov dword ptr ds:[0x22222222],0x0
        执行代码 ＝ 执行代码 ＋ { 137, 53 } ＋ 到字节集 (人物对象)  ' mov dword ptr ds:[0xEAF0000],esi
        执行代码 ＝ 执行代码 ＋ { 137, 29 } ＋ 到字节集 (ebx)  ' mov dword ptr ds:[0xEAF0000],ebx
        执行代码 ＝ 执行代码 ＋ { 139, 13 } ＋ 到字节集 (编号)  ' mov ecx,dword ptr ds:[编号]
        执行代码 ＝ 执行代码 ＋ { 139, 53 } ＋ 到字节集 (人物对象)  ' mov esi,dword ptr ds:[人物对象]
        执行代码 ＝ 执行代码 ＋ { 139, 29 } ＋ 到字节集 (ebx)
        执行代码 ＝ 执行代码 ＋ { 144, 144, 144, 144, 144, 144 }
        执行代码 ＝ 执行代码 ＋ { 131, 60, 141 } ＋ 到字节集 (物品ID) ＋ { 0 }  ' 判断物品ID是不是等于0

        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“0F 84 B3 00 00 00”)  ' je
        ' 执行代码 ＝ 执行代码 ＋ { 139, 132, 158, 192, 1, 0, 0 }  ' 读装备对象 mov eax,dword ptr ds:[esi+ebx*4+0x1CC]
        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“8B 84 9E CC 01 00 00”)  ' mov eax,dword ptr ds:[esi+ebx*4+0x1CC]
        执行代码 ＝ 执行代码 ＋ { 131, 248, 0 }  ' cmp eax,0x0

        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“74 7F”)  ' je
        执行代码 ＝ 执行代码 ＋ { 144, 144, 144, 144 }
        执行代码 ＝ 执行代码 ＋ { 139, 64, 48 }  ' mov eax,dword ptr ds:[eax+0x30]
        执行代码 ＝ 执行代码 ＋ { 139, 0 }  ' mov eax,dword ptr ds:[eax]

        执行代码 ＝ 执行代码 ＋ { 62, 57, 4, 141 } ＋ 到字节集 (物品ID)  ' 判断物品ID是不是等于0  cmp dword ptr ds:[ecx*4+0x11111111],eax

        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“75 6C”)  ' JNZ
        执行代码 ＝ 执行代码 ＋ { 62, 139, 20, 141 } ＋ 到字节集 (技能等级)  ' mov edx,dword ptr ds:[ecx*4+0xEB40000]
        执行代码 ＝ 执行代码 ＋ { 62, 139, 4, 141 } ＋ 到字节集 (技能ID)  ' mov eax,dword ptr ds:[ecx*4+0xEB40000]
        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“BD C0 01 42 00”)  ' MOV EBP,4201C0
        执行代码 ＝ 执行代码 ＋ { 255, 213 }  ' call ebp '遍历所有技能
        执行代码 ＝ 执行代码 ＋ { 163 } ＋ 到字节集 (当前技能对象)  ' mov [当前技能对象],eax

        执行代码 ＝ 执行代码 ＋ { 131, 248, 0 }  ' cmp eax,0x0

        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“74 4b”)  ' je
        执行代码 ＝ 执行代码 ＋ { 139, 13 } ＋ 到字节集 (编号)  ' mov ecx,dword ptr ds:[0x2222222]
        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“90 90”)

        执行代码 ＝ 执行代码 ＋ { 106, 100 }  ' PUSH 64
        执行代码 ＝ 执行代码 ＋ { 106, 1 }  ' PUSH 1
        执行代码 ＝ 执行代码 ＋ { 255, 21 } ＋ 到字节集 (随机数内存)  ' CALL [111111]
        执行代码 ＝ 执行代码 ＋ { 139, 208 }  ' mov edx,eax
        执行代码 ＝ 执行代码 ＋ { 139, 13 } ＋ 到字节集 (编号)  ' mov ecx,dword ptr ds:[0x2222222]
        执行代码 ＝ 执行代码 ＋ { 62, 57, 20, 141 } ＋ 到字节集 (几率)  ' cmp dword ptr ds:[ecx*4+0x44680000],edx
        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“7C 27”)  ' jL  大于

        执行代码 ＝ 执行代码 ＋ { 139, 13 } ＋ 到字节集 (编号)  ' mov ecx,dword ptr ds:[编号]
        执行代码 ＝ 执行代码 ＋ { 255, 53 } ＋ 到字节集 (当前技能对象)  ' push  [当前技能对象]                  +0x14
        执行代码 ＝ 执行代码 ＋ { 255, 53 } ＋ 到字节集 (人物对象)  ' push  [人物对象]                          +0x10
        执行代码 ＝ 执行代码 ＋ { 255, 53 } ＋ 到字节集 (怪物对象)  ' push dword ptr ds:[怪物对象]                      +0c
        执行代码 ＝ 执行代码 ＋ { 255, 52, 141 } ＋ 到字节集 (技能类型)  ' push dword ptr ds:[ecx*4+技能类型]   +08
        执行代码 ＝ 执行代码 ＋ { 255, 21 } ＋ 到字节集 (开始用技能eax)  ' CALL [开始用技能]



        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“EB 00”)  ' jmp

        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“83 05”) ＋ 到字节集 (ebx) ＋ { 1 }  ' add dword ptr ds:[0xEBD0000],0x1
        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“83 3d”) ＋ 到字节集 (ebx) ＋ { 24 }  ' add dword ptr ds:[0xEBD0000],0x18
        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“7c 13”)  ' jl
        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“c7 05”) ＋ 到字节集 (ebx) ＋ { 0, 0, 0, 0 }
        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“EB 00”)


        执行代码 ＝ 执行代码 ＋ { 131, 5 } ＋ 到字节集 (编号) ＋ { 1 }  ' add dword ptr ds:[0x22222222],0x1
        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“E9 27 FF FF FF”)  ' jmp
        执行代码 ＝ 执行代码 ＋ { 97 }
        执行代码 ＝ 执行代码 ＋ { 195 }  ' retn

        eax ＝ 内存_申请内存 (进程句柄, 4096)
        内存_写字节集型 (进程句柄, eax, 执行代码, )



        内存_写整数型 (进程句柄, 开始用技能eax, 开始用技能)


        执行代码 ＝ 执行代码 ＋ { 139, 13 } ＋ 到字节集 (编号)  ' mov ecx,dword ptr ds:[编号]
        执行代码 ＝ 执行代码 ＋ { 255, 53 } ＋ 到字节集 (当前技能对象)  ' push  [当前技能对象]                  +0x14
        执行代码 ＝ 执行代码 ＋ { 255, 53 } ＋ 到字节集 (人物对象)  ' push  [人物对象]                          +0x10
        执行代码 ＝ 执行代码 ＋ { 255, 53 } ＋ 到字节集 (怪物对象)  ' push dword ptr ds:[怪物对象]                      +0c


        执行代码3 ＝ { 85, 139, 236 }  ' push ebp mov ebp,esp
        ' 执行代码3 ＝ 执行代码3 ＋ { 131, 125, 8, 0 }  ' cmp dword ptr ss:[ebp+0x8],0x0
        ' 执行代码3 ＝ 执行代码3 ＋ 转换_十六进制到字节集 (“75 0F”)  ' jnz
        执行代码3 ＝ 执行代码3 ＋ { 106, 1 }  ' push 0x1
        执行代码3 ＝ 执行代码3 ＋ { 86 }  ' push esi  人物对象
        执行代码3 ＝ 执行代码3 ＋ { 139, 206 }  ' mov ecx,esi
        执行代码3 ＝ 执行代码3 ＋ 转换_十六进制到字节集 (“8B 7D 14”)  ' mov edi,dword ptr ss:[ebp+0x14]
        执行代码3 ＝ 执行代码3 ＋ 转换_十六进制到字节集 (“B8 20 92 46 00”)  ' MOV EAX,469220

        执行代码3 ＝ 执行代码3 ＋ { 255, 208 }  ' CALL EAX 添加buffcall


        执行代码3 ＝ 执行代码3 ＋ { 201, 194, 16, 0 }  ' retn 0x10
        内存_写字节集型 (进程句柄, 开始用技能, 执行代码3, )

        ' 0045CE02  |> \57            push edi                                            ;  技能对象
        ' 0045CE03  |.  56            push esi                                            ;  怪物对象
        ' 0045CE04  |.  8BCB          mov ecx,ebx                                         ;  人物对象
        ' 0045CE06  |.  E8 75000000   call <ps_game.指定单体攻击>                               ;  指定单体攻击  call 0045CE80



        ' 00474D87  |> \57            push edi                                 ;  案例 500 --> 分支 00474BB9
        ' 00474D88  |.  8BCB          mov ecx,ebx
        ' 00474D8A  |.  E8 01370000   call ps_game.00478490                    ;  517



        执行代码2 ＝ { 96 }
        执行代码2 ＝ 执行代码2 ＋ 转换_十六进制到字节集 (“BB 00 00 00 00”)  ' mov ebx,0x0
        执行代码2 ＝ 执行代码2 ＋ 转换_十六进制到字节集 (“83 FB 18”)  ' cmp ebx,0xC

        执行代码2 ＝ 执行代码2 ＋ 转换_十六进制到字节集 (“7D 16”)  ' jge short 0EC00021
        执行代码2 ＝ 执行代码2 ＋ 转换_十六进制到字节集 (“83 BC 9F C0 01 00 00 00”)  ' cmp dword ptr ds:[edi+ebx*4+0x1C0],0x0
        执行代码2 ＝ 执行代码2 ＋ 转换_十六进制到字节集 (“74 07”)  ' je short 532C0017

        执行代码2 ＝ 执行代码2 ＋ { 184 } ＋ 到字节集 (eax)  ' mov eax,0x532B0000
        执行代码2 ＝ 执行代码2 ＋ 转换_十六进制到字节集 (“FF D0”)  ' call eax
        执行代码2 ＝ 执行代码2 ＋ 转换_十六进制到字节集 (“83 C3 01”)  ' add ebx,0x1
        执行代码2 ＝ 执行代码2 ＋ 转换_十六进制到字节集 (“EB E5”)  ' jmp short 532C0006

        执行代码2 ＝ 执行代码2 ＋ { 97 }



        eax2 ＝ 内存_申请内存 (进程句柄, 4096)
        内存_写整数型 (进程句柄, eax2, eax)

        执行代码4 ＝ { 96 }


        执行代码4 ＝ 执行代码4 ＋ 转换_十六进制到字节集 (“8B C6”)  ' mov eax,ESI
        执行代码4 ＝ 执行代码4 ＋ { 163 } ＋ 到字节集 (怪物对象)  ' mov dword ptr ds:[0xEAF0000],eax

        执行代码4 ＝ 执行代码4 ＋ { 255, 21 } ＋ 到字节集 (eax2)


        执行代码4 ＝ 执行代码4 ＋ { 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144 }
        执行代码4 ＝ 执行代码4 ＋ { 97 }

        HOOK.开始HOOK2 (进程句柄, 转换_十六到十 (“004D0869”), 转换_十六进制到字节集 (“0F B7 84 8A 80 00 00 00”), , 执行代码4)  ' 被打怪

        ' 004D0869  |.  0FB7848A 80000000         MOVZX EAX,WORD PTR DS:[EDX+ECX*4+80]


    .默认

        内存_写字节集型 (进程句柄, 转换_十六到十 (“004D0869”), 转换_十六进制到字节集 (“0F B7 84 8A 80 00 00 00”), )

    .判断结束

.默认

.判断结束


.子程序 切换显示装备_打人
.参数 开关, 逻辑型
.局部变量 HOOK, 无望类_HOOK
.局部变量 执行代码, 字节集
.局部变量 编号, 整数型
.局部变量 人物对象, 整数型
.局部变量 ebx, 整数型
.局部变量 物品ID, 整数型
.局部变量 技能ID, 整数型
.局部变量 技能等级, 整数型
.局部变量 i, 整数型
.局部变量 几率, 整数型
.局部变量 随机数eax, 整数型
.局部变量 随机数内存, 整数型
.局部变量 执行代码2, 字节集
.局部变量 eax, 整数型
.局部变量 当前技能对象, 整数型
.局部变量 技能类型, 整数型
.局部变量 开始用技能, 整数型
.局部变量 执行代码3, 字节集
.局部变量 执行代码4, 字节集
.局部变量 怪物对象, 整数型
.局部变量 eax2, 整数型
.局部变量 开始用技能eax, 整数型
.局部变量 i2, 整数型



随机数eax ＝ 内存_申请内存 (进程句柄, 4096)
内存_写字节集型 (进程句柄, 随机数eax, { 85, 139, 236 } ＋ { 81, 82, 15, 49, 185, 23, 0, 0, 0, 247, 225, 131, 192, 7, 139, 77, 12, 43, 77, 8, 65, 51, 210, 247, 241, 3, 85, 8, 139, 194, 90, 89, 201, 194, 8, 0 }, )
随机数内存 ＝ 内存_申请内存 (进程句柄, 4096)
内存_写整数型 (进程句柄, 随机数内存, 随机数eax)
.判断开始 (全局_ps_game版本 ＝ 5)

.判断 (全局_ps_game版本 ＝ 9)

    .判断开始 (开关 ＝ 真)
        编号 ＝ 内存_申请内存 (进程句柄, 4096)
        内存_写整数型 (进程句柄, 编号, 0)
        开始用技能 ＝ 内存_申请内存 (进程句柄, 4096)
        怪物对象 ＝ 内存_申请内存 (进程句柄, 4096)
        开始用技能eax ＝ 内存_申请内存 (进程句柄, 4096)


        人物对象 ＝ 内存_申请内存 (进程句柄, 4096)
        ebx ＝ 内存_申请内存 (进程句柄, 4096)
        物品ID ＝ 内存_申请内存 (进程句柄, 4096)
        技能等级 ＝ 内存_申请内存 (进程句柄, 4096)
        技能ID ＝ 内存_申请内存 (进程句柄, 4096)
        几率 ＝ 内存_申请内存 (进程句柄, 4096)
        当前技能对象 ＝ 内存_申请内存 (进程句柄, 4096)
        技能类型 ＝ 内存_申请内存 (进程句柄, 4096)
        i2 ＝ 0

        .计次循环首 (取数组成员数 (全局_切换装备buff), i)
            .如果真 (全局_切换装备buff [i].技能类型 ＝ 0 且 全局_切换装备buff [i].几率 ≠ 100)
                内存_写整数型 (进程句柄, 物品ID ＋ i2 × 4, 全局_切换装备buff [i].战功)
                内存_写整数型 (进程句柄, 技能ID ＋ i2 × 4, 全局_切换装备buff [i].技能ID)
                内存_写整数型 (进程句柄, 技能等级 ＋ i2 × 4, 全局_切换装备buff [i].技能等级)

                内存_写整数型 (进程句柄, 几率 ＋ i2 × 4, 全局_切换装备buff [i].几率)

                内存_写整数型 (进程句柄, 技能类型 ＋ i2 × 4, 全局_切换装备buff [i].技能类型)

                i2 ＝ i2 ＋ 1
            .如果真结束

        .计次循环尾 ()


        执行代码 ＝ {  }
        执行代码 ＝ 执行代码 ＋ { 96 }
        执行代码 ＝ 执行代码 ＋ { 139, 247 }  ' mov esi,edi
        执行代码 ＝ 执行代码 ＋ { 187, 0, 0, 0, 0 }  ' mov ebx,0x0

        ' 执行代码 ＝ 执行代码 ＋ { 163 } ＋ 到字节集 (怪物对象)  ' mov [怪物对象],eax
        执行代码 ＝ 执行代码 ＋ { 199, 5 } ＋ 到字节集 (编号) ＋ { 0, 0, 0, 0 }  ' mov dword ptr ds:[0x22222222],0x0
        执行代码 ＝ 执行代码 ＋ { 137, 53 } ＋ 到字节集 (人物对象)  ' mov dword ptr ds:[0xEAF0000],esi
        执行代码 ＝ 执行代码 ＋ { 137, 29 } ＋ 到字节集 (ebx)  ' mov dword ptr ds:[0xEAF0000],ebx
        执行代码 ＝ 执行代码 ＋ { 139, 13 } ＋ 到字节集 (编号)  ' mov ecx,dword ptr ds:[编号]
        执行代码 ＝ 执行代码 ＋ { 139, 53 } ＋ 到字节集 (人物对象)  ' mov esi,dword ptr ds:[人物对象]
        执行代码 ＝ 执行代码 ＋ { 139, 29 } ＋ 到字节集 (ebx)
        执行代码 ＝ 执行代码 ＋ { 144, 144, 144, 144, 144, 144 }
        执行代码 ＝ 执行代码 ＋ { 131, 60, 141 } ＋ 到字节集 (物品ID) ＋ { 0 }  ' 判断物品ID是不是等于0

        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“0F 84 B3 00 00 00”)  ' je
        执行代码 ＝ 执行代码 ＋ { 139, 132, 158, 192, 1, 0, 0 }  ' 读装备对象 mov eax,dword ptr ds:[esi+ebx*4+0x1C0]
        执行代码 ＝ 执行代码 ＋ { 131, 248, 0 }  ' cmp eax,0x0

        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“74 7F”)  ' je
        执行代码 ＝ 执行代码 ＋ { 144, 144, 144, 144 }
        执行代码 ＝ 执行代码 ＋ { 139, 64, 48 }  ' mov eax,dword ptr ds:[eax+0x30]
        执行代码 ＝ 执行代码 ＋ { 139, 0 }  ' mov eax,dword ptr ds:[eax]

        执行代码 ＝ 执行代码 ＋ { 62, 57, 4, 141 } ＋ 到字节集 (物品ID)  ' 判断物品ID是不是等于0  cmp dword ptr ds:[ecx*4+0x11111111],eax

        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“75 6C”)  ' JNZ
        执行代码 ＝ 执行代码 ＋ { 62, 139, 20, 141 } ＋ 到字节集 (技能等级)  ' mov edx,dword ptr ds:[ecx*4+0xEB40000]
        执行代码 ＝ 执行代码 ＋ { 62, 139, 4, 141 } ＋ 到字节集 (技能ID)  ' mov eax,dword ptr ds:[ecx*4+0xEB40000]
        执行代码 ＝ 执行代码 ＋ { 189, 48, 187, 65, 0 }  ' mov ebp,0x41BB30
        执行代码 ＝ 执行代码 ＋ { 255, 213 }  ' call ebp '遍历所有技能
        执行代码 ＝ 执行代码 ＋ { 163 } ＋ 到字节集 (当前技能对象)  ' mov [当前技能对象],eax

        执行代码 ＝ 执行代码 ＋ { 131, 248, 0 }  ' cmp eax,0x0

        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“74 4b”)  ' je
        执行代码 ＝ 执行代码 ＋ { 139, 13 } ＋ 到字节集 (编号)  ' mov ecx,dword ptr ds:[0x2222222]
        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“90 90”)

        执行代码 ＝ 执行代码 ＋ { 106, 100 }  ' PUSH 64
        执行代码 ＝ 执行代码 ＋ { 106, 1 }  ' PUSH 1
        执行代码 ＝ 执行代码 ＋ { 255, 21 } ＋ 到字节集 (随机数内存)  ' CALL [111111]
        执行代码 ＝ 执行代码 ＋ { 139, 208 }  ' mov edx,eax
        执行代码 ＝ 执行代码 ＋ { 139, 13 } ＋ 到字节集 (编号)  ' mov ecx,dword ptr ds:[0x2222222]
        执行代码 ＝ 执行代码 ＋ { 62, 57, 20, 141 } ＋ 到字节集 (几率)  ' cmp dword ptr ds:[ecx*4+0x44680000],edx
        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“7C 27”)  ' jL  大于

        执行代码 ＝ 执行代码 ＋ { 139, 13 } ＋ 到字节集 (编号)  ' mov ecx,dword ptr ds:[编号]
        执行代码 ＝ 执行代码 ＋ { 255, 53 } ＋ 到字节集 (当前技能对象)  ' push  [当前技能对象]                  +0x14
        执行代码 ＝ 执行代码 ＋ { 255, 53 } ＋ 到字节集 (人物对象)  ' push  [人物对象]                          +0x10
        执行代码 ＝ 执行代码 ＋ { 255, 53 } ＋ 到字节集 (怪物对象)  ' push dword ptr ds:[怪物对象]                      +0c
        执行代码 ＝ 执行代码 ＋ { 255, 52, 141 } ＋ 到字节集 (技能类型)  ' push dword ptr ds:[ecx*4+技能类型]   +08
        执行代码 ＝ 执行代码 ＋ { 255, 21 } ＋ 到字节集 (开始用技能eax)  ' CALL [开始用技能]



        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“EB 00”)  ' jmp

        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“83 05”) ＋ 到字节集 (ebx) ＋ { 1 }  ' add dword ptr ds:[0xEBD0000],0x1
        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“83 3d”) ＋ 到字节集 (ebx) ＋ { 24 }  ' add dword ptr ds:[0xEBD0000],0x18
        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“7c 13”)  ' jl
        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“c7 05”) ＋ 到字节集 (ebx) ＋ { 0, 0, 0, 0 }
        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“EB 00”)


        执行代码 ＝ 执行代码 ＋ { 131, 5 } ＋ 到字节集 (编号) ＋ { 1 }  ' add dword ptr ds:[0x22222222],0x1
        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“E9 27 FF FF FF”)  ' jmp
        执行代码 ＝ 执行代码 ＋ { 97 }
        执行代码 ＝ 执行代码 ＋ { 195 }  ' retn

        eax ＝ 内存_申请内存 (进程句柄, 4096)
        内存_写字节集型 (进程句柄, eax, 执行代码, )



        内存_写整数型 (进程句柄, 开始用技能eax, 开始用技能)


        执行代码 ＝ 执行代码 ＋ { 139, 13 } ＋ 到字节集 (编号)  ' mov ecx,dword ptr ds:[编号]
        执行代码 ＝ 执行代码 ＋ { 255, 53 } ＋ 到字节集 (当前技能对象)  ' push  [当前技能对象]                  +0x14
        执行代码 ＝ 执行代码 ＋ { 255, 53 } ＋ 到字节集 (人物对象)  ' push  [人物对象]                          +0x10
        执行代码 ＝ 执行代码 ＋ { 255, 53 } ＋ 到字节集 (怪物对象)  ' push dword ptr ds:[怪物对象]                      +0c


        执行代码3 ＝ { 85, 139, 236 }  ' push ebp mov ebp,esp
        ' 执行代码3 ＝ 执行代码3 ＋ { 131, 125, 8, 0 }  ' cmp dword ptr ss:[ebp+0x8],0x0
        ' 执行代码3 ＝ 执行代码3 ＋ 转换_十六进制到字节集 (“75 0F”)  ' jnz
        执行代码3 ＝ 执行代码3 ＋ { 106, 1 }  ' push 0x1
        执行代码3 ＝ 执行代码3 ＋ { 86 }  ' push esi  人物对象
        执行代码3 ＝ 执行代码3 ＋ { 139, 206 }  ' mov ecx,esi

        执行代码3 ＝ 执行代码3 ＋ { 139, 117, 20 }  ' mov esi,dword ptr ss:[ebp+0x14]
        执行代码3 ＝ 执行代码3 ＋ { 184, 176, 203, 69, 0 }  ' mov eax,0x45CBB0
        执行代码3 ＝ 执行代码3 ＋ { 255, 208 }  ' CALL EAX 添加buffcall
        ' 执行代码3 ＝ 执行代码3 ＋ { 131, 125, 8, 1 }  ' cmp dword ptr ss:[ebp+0x8],0x1
        ' 执行代码3 ＝ 执行代码3 ＋ 转换_十六进制到字节集 (“75 19”)  ' jnz

        ' 执行代码3 ＝ 执行代码3 ＋ { 255, 53 } ＋ 到字节集 (当前技能对象)  ' push  [当前技能对象]                  +0x14
        ' 执行代码3 ＝ 执行代码3 ＋ { 255, 53 } ＋ 到字节集 (怪物对象)  ' push dword ptr ds:[怪物对象]                      +0c
        ' 执行代码3 ＝ 执行代码3 ＋ { 139, 13 } ＋ 到字节集 (人物对象)  ' push  [人物对象]                          +0x10
        ' 执行代码3 ＝ 执行代码3 ＋ { 184, 128, 206, 69, 0, 255, 208 }  ' mov eax,0x45CE80 call eax



        执行代码3 ＝ 执行代码3 ＋ { 201, 194, 16, 0 }  ' retn 0x10
        内存_写字节集型 (进程句柄, 开始用技能, 执行代码3, )

        ' 0045CE02  |> \57            push edi                                            ;  技能对象
        ' 0045CE03  |.  56            push esi                                            ;  怪物对象
        ' 0045CE04  |.  8BCB          mov ecx,ebx                                         ;  人物对象
        ' 0045CE06  |.  E8 75000000   call <ps_game.指定单体攻击>                               ;  指定单体攻击  call 0045CE80



        ' 00474D87  |> \57            push edi                                 ;  案例 500 --> 分支 00474BB9
        ' 00474D88  |.  8BCB          mov ecx,ebx
        ' 00474D8A  |.  E8 01370000   call ps_game.00478490                    ;  517



        执行代码2 ＝ { 96 }
        执行代码2 ＝ 执行代码2 ＋ 转换_十六进制到字节集 (“BB 00 00 00 00”)  ' mov ebx,0x0
        执行代码2 ＝ 执行代码2 ＋ 转换_十六进制到字节集 (“83 FB 18”)  ' cmp ebx,0xC

        执行代码2 ＝ 执行代码2 ＋ 转换_十六进制到字节集 (“7D 16”)  ' jge short 0EC00021
        执行代码2 ＝ 执行代码2 ＋ 转换_十六进制到字节集 (“83 BC 9F C0 01 00 00 00”)  ' cmp dword ptr ds:[edi+ebx*4+0x1C0],0x0
        执行代码2 ＝ 执行代码2 ＋ 转换_十六进制到字节集 (“74 07”)  ' je short 532C0017

        执行代码2 ＝ 执行代码2 ＋ { 184 } ＋ 到字节集 (eax)  ' mov eax,0x532B0000
        执行代码2 ＝ 执行代码2 ＋ 转换_十六进制到字节集 (“FF D0”)  ' call eax
        执行代码2 ＝ 执行代码2 ＋ 转换_十六进制到字节集 (“83 C3 01”)  ' add ebx,0x1
        执行代码2 ＝ 执行代码2 ＋ 转换_十六进制到字节集 (“EB E5”)  ' jmp short 532C0006

        执行代码2 ＝ 执行代码2 ＋ { 97 }



        eax2 ＝ 内存_申请内存 (进程句柄, 4096)
        内存_写整数型 (进程句柄, eax2, eax)

        执行代码4 ＝ { 96 }

        执行代码4 ＝ 执行代码4 ＋ 转换_十六进制到字节集 (“8B C7”)  ' mov eax,edi
        执行代码4 ＝ 执行代码4 ＋ { 163 } ＋ 到字节集 (怪物对象)  ' mov dword ptr ds:[0xEAF0000],eax

        执行代码4 ＝ 执行代码4 ＋ { 255, 21 } ＋ 到字节集 (eax2)


        执行代码4 ＝ 执行代码4 ＋ { 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144 }
        执行代码4 ＝ 执行代码4 ＋ { 97 }
        HOOK.开始HOOK2 (进程句柄, 转换_十六到十 (“0045A708”), { 137, 143, 72, 21, 0, 0 }, , 执行代码4)  ' 攻击别人  0045A708  |.  898F 48150000        mov dword ptr ds:[edi+0x1548],ecx



    .默认


        内存_写字节集型 (进程句柄, 转换_十六到十 (“0045A708”), { 137, 143, 72, 21, 0, 0 }, )
    .判断结束

.默认

.判断结束


.子程序 切换显示装备_删除状态
.参数 开关, 逻辑型
.局部变量 HOOK, 无望类_HOOK
.局部变量 执行代码, 字节集
.局部变量 编号, 整数型
.局部变量 人物对象, 整数型
.局部变量 ebx, 整数型
.局部变量 物品ID, 整数型
.局部变量 技能ID, 整数型
.局部变量 技能等级, 整数型
.局部变量 i, 整数型
.局部变量 删除buffeax, 整数型
.局部变量 随机数eax, 整数型
.局部变量 随机数字, 整数型

随机数eax ＝ 内存_申请内存 (进程句柄, 4096)
内存_写字节集型 (进程句柄, 随机数eax, { 85, 139, 236 } ＋ { 81, 82, 15, 49, 185, 23, 0, 0, 0, 247, 225, 131, 192, 7, 139, 77, 12, 43, 77, 8, 65, 51, 210, 247, 241, 3, 85, 8, 139, 194, 90, 89, 201, 194, 8, 0 }, )

.判断开始 (全局_ps_game版本 ＝ 5)

.判断 (全局_ps_game版本 ＝ 9)

.判断 (全局_ps_game版本 ＝ 12)

    .判断开始 (开关 ＝ 真)
        删除buffeax ＝ 内存_申请内存 (进程句柄, 4096)

        内存_写字节集型 (进程句柄, 删除buffeax, 转换_十六进制到字节集 (“57 8D BE A4 0A 00 00 57 FF 15 DC 50 58 00 8B 8E 9C 0A 00 00 8B 41 04 89 86 A0 0A 00 00 3B C1 74 31 85 C0 74 2D B2 04 8B 48 34 38 51 31 75 08 66 8B 09 66 3B 0B 74 26 8B 86 A0 0A 00 00 8B 40 04 89 86 A0 0A 00 00 3B 86 9C 0A 00 00 74 04 85 C0 75 D5 57 FF 15 D4 50 58 00 32 C0 5F C3 C7 40 20 00 00 00 00 8B 48 34 8A 51 02 57 3A 53 02 76 E3 FF 15 D4 50 58 00 B0 01 5F C3”), )
        ' 删除buff



        ' 内存_写整数型 (进程句柄, 删除buffeax, 转换_十六到十 (“004B1E50”))


        编号 ＝ 内存_申请内存 (进程句柄, 4096)
        内存_写整数型 (进程句柄, 编号, 0)

        人物对象 ＝ 内存_申请内存 (进程句柄, 4096)
        ebx ＝ 内存_申请内存 (进程句柄, 4096)
        物品ID ＝ 内存_申请内存 (进程句柄, 4096)
        技能等级 ＝ 内存_申请内存 (进程句柄, 4096)
        技能ID ＝ 内存_申请内存 (进程句柄, 4096)
        随机数字 ＝ 内存_申请内存 (进程句柄, 4096)
        .计次循环首 (取数组成员数 (全局_切换装备buff), i)

            内存_写整数型 (进程句柄, 物品ID ＋ (i － 1) × 4, 全局_切换装备buff [i].战功)
            内存_写整数型 (进程句柄, 技能ID ＋ (i － 1) × 4, 全局_切换装备buff [i].技能ID)
            内存_写整数型 (进程句柄, 技能等级 ＋ (i － 1) × 4, 全局_切换装备buff [i].技能等级)
            内存_写整数型 (进程句柄, 随机数字 ＋ (i － 1) × 4, 全局_切换装备buff [i].几率)
        .计次循环尾 ()


        执行代码 ＝ {  }
        执行代码 ＝ 执行代码 ＋ { 96 }
        执行代码 ＝ 执行代码 ＋ { 199, 5 } ＋ 到字节集 (编号) ＋ { 0, 0, 0, 0 }  ' mov dword ptr ds:[0x22222222],0x0
        执行代码 ＝ 执行代码 ＋ { 137, 61 } ＋ 到字节集 (人物对象)  ' mov dword ptr ds:[0xEAF0000],EDI
        执行代码 ＝ 执行代码 ＋ { 137, 29 } ＋ 到字节集 (ebx)  ' mov dword ptr ds:[0xEAF0000],ebx
        执行代码 ＝ 执行代码 ＋ { 139, 13 } ＋ 到字节集 (编号)  ' mov ecx,dword ptr ds:[0x2222222]
        执行代码 ＝ 执行代码 ＋ { 139, 53 } ＋ 到字节集 (人物对象)  ' mov esi,dword ptr ds:[人物对象]
        执行代码 ＝ 执行代码 ＋ { 139, 29 } ＋ 到字节集 (ebx)
        执行代码 ＝ 执行代码 ＋ { 144, 144, 144, 144, 144, 144 }
        执行代码 ＝ 执行代码 ＋ { 131, 60, 141 } ＋ 到字节集 (物品ID) ＋ { 0 }  ' 判断物品ID是不是等于0
        执行代码 ＝ 执行代码 ＋ { 116, 73 }  ' je
        ' 执行代码 ＝ 执行代码 ＋ { 139, 132, 158, 192, 1, 0, 0, 139, 64, 48, 139, 0 }  ' 读装备对象
        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“8B 84 9E CC 01 00 00 8B 40 30 8B 00”)  ' 读装备对象



        执行代码 ＝ 执行代码 ＋ { 62, 57, 4, 141 } ＋ 到字节集 (物品ID)  ' 判断物品ID是不是等于0  cmp dword ptr ds:[ecx*4+0x11111111],eax

        执行代码 ＝ 执行代码 ＋ { 117, 42 }  ' JNZ
        执行代码 ＝ 执行代码 ＋ { 62, 139, 20, 141 } ＋ 到字节集 (技能等级)  ' mov edx,dword ptr ds:[ecx*4+0xEB40000]
        执行代码 ＝ 执行代码 ＋ { 62, 139, 4, 141 } ＋ 到字节集 (技能ID)  ' mov eax,dword ptr ds:[ecx*4+0xEB40000]

        执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“BD C0 01 42 00”)  ' mov ebp,0x4201C0
        执行代码 ＝ 执行代码 ＋ { 255, 213 }  ' call ebp '遍历技能列表
        执行代码 ＝ 执行代码 ＋ { 131, 248, 0 }  ' cmp eax,0x0
        执行代码 ＝ 执行代码 ＋ { 116, 14 }  ' je

        ' 执行代码 ＝ 执行代码 ＋ 转换_十六进制到字节集 (“90 90 56 90 B8 50 1E 4B 00 FF D0”)  ' mov ebx,eax 删除buff  call 004B1E50

        执行代码 ＝ 执行代码 ＋ { 139, 216 }  ' mov ebx,eax 删除buff
        执行代码 ＝ 执行代码 ＋ { 139, 254 }  ' mov edi,esi
        执行代码 ＝ 执行代码 ＋ { 184 } ＋ 到字节集 (删除buffeax)  ' call eax'删除buff
        执行代码 ＝ 执行代码 ＋ { 255, 208 }  ' call eax

        执行代码 ＝ 执行代码 ＋ { 144, 144, 144 }
        执行代码 ＝ 执行代码 ＋ { 131, 5 } ＋ 到字节集 (编号) ＋ { 1 }  ' add dword ptr ds:[0x22222222],0x1
        执行代码 ＝ 执行代码 ＋ { 235, 149 }
        执行代码 ＝ 执行代码 ＋ { 97 }

        HOOK.开始HOOK2 (进程句柄, 转换_十六到十 (“00476CBE”), 转换_十六进制到字节集 (“8B 74 24 1C 89 06”), , 执行代码)  ' 脱没有装备位置时、


        HOOK.开始HOOK2 (进程句柄, 转换_十六到十 (“00476E20”), 转换_十六进制到字节集 (“8B 6C 24 1C 8B 4D 00”), , 执行代码)  ' 脱 有装备的位置 增加buff
        ' 8B 6C 24 1C 8B 4D 00
        ' 00476E20   > \8B6C24 1C         MOV EBP,DWORD PTR SS:[ESP+1C]


        HOOK.开始HOOK2 (进程句柄, 转换_十六到十 (“00477138”), 转换_十六进制到字节集 (“8B849F CC010000”), , 执行代码)  ' 00477138   MOV EAX,DWORD PTR DS:[EDI+EBX*4+1CC]     ;  切换装备下来






        ' dd EBP+0A9C  遍历buff

        ' 删除buffeax
        ' 004B1E50 > $  83EC 10           SUB ESP,10                               ;  删除buff



    .默认
        内存_写字节集型 (进程句柄, 转换_十六到十 (“00476CBE”), 转换_十六进制到字节集 (“8B 74 24 1C 89 06”))
        内存_写字节集型 (进程句柄, 转换_十六到十 (“00476E20”), 转换_十六进制到字节集 (“8B 6C 24 1C 8B 4D 00”))
        内存_写字节集型 (进程句柄, 转换_十六到十 (“00477138”), 转换_十六进制到字节集 (“8B849F CC010000”), )
    .判断结束

.默认

.判断结束


.子程序 _按钮_显示装备_被单击

初始化表格 (高级表格_切换装备, “索引,装备ID   ,技能ID,技能等级,几率,技能类型”)
显示装备表格数据 ()


.子程序 显示装备表格数据
.局部变量 i, 整数型
.局部变量 索引, 整数型

.计次循环首 (取数组成员数 (全局_切换装备buff), i)

    高级表格_切换装备.插入行 (, )
    索引 ＝ 高级表格_切换装备.行数 － 1
    窗口_战功点卡.高级表格_切换装备.置数据 (索引, 0, #表格常量.文本型, 到文本 (全局_切换装备buff [i].战功等级))
    窗口_战功点卡.高级表格_切换装备.置数据 (索引, 1, #表格常量.文本型, 到文本 (全局_切换装备buff [i].战功))
    窗口_战功点卡.高级表格_切换装备.置数据 (索引, 2, #表格常量.文本型, 到文本 (全局_切换装备buff [i].技能ID))
    窗口_战功点卡.高级表格_切换装备.置数据 (索引, 3, #表格常量.文本型, 到文本 (全局_切换装备buff [i].技能等级))
    窗口_战功点卡.高级表格_切换装备.置数据 (索引, 4, #表格常量.文本型, 到文本 (全局_切换装备buff [i].几率))
    窗口_战功点卡.高级表格_切换装备.置数据 (索引, 5, #表格常量.文本型, 到文本 (全局_切换装备buff [i].技能类型))
.计次循环尾 ()


.子程序 _按钮_切换装备_应用设置_被单击
.局部变量 i, 整数型
.局部变量 索引, 整数型

.计次循环首 (窗口_战功点卡.高级表格_切换装备.行数 － 1, i)
    全局_切换装备buff [i].战功等级 ＝ 到整数 (窗口_战功点卡.高级表格_切换装备.取数据 (i, 0))
    全局_切换装备buff [i].战功 ＝ 到整数 (窗口_战功点卡.高级表格_切换装备.取数据 (i, 1))
    全局_切换装备buff [i].技能ID ＝ 到整数 (窗口_战功点卡.高级表格_切换装备.取数据 (i, 2))
    全局_切换装备buff [i].技能等级 ＝ 到整数 (窗口_战功点卡.高级表格_切换装备.取数据 (i, 3))
    全局_切换装备buff [i].几率 ＝ 到整数 (窗口_战功点卡.高级表格_切换装备.取数据 (i, 4))
    全局_切换装备buff [i].技能类型 ＝ 到整数 (窗口_战功点卡.高级表格_切换装备.取数据 (i, 5))
.计次循环尾 ()





















